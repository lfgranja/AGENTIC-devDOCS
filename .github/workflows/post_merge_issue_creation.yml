name: Post-Merge Issue Creation

on:
  pull_request:
    types: [closed]
    branches: [main, dev]

permissions:
  contents: read
  issues: write

jobs:
  create-issues:
    # Only run if the PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Checkout the merge commit
        ref: refs/pull/${{ github.event.pull_request.number }}/merge
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Find ISSUES_TO_CREATE documentation
      id: find-docs
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        ISSUES_FILE="devDOCS/$PR_NUMBER/ISSUES_TO_CREATE${PR_NUMBER}.md"
        
        if [ -f "$ISSUES_FILE" ]; then
          echo "found=true" >> $GITHUB_OUTPUT
          echo "issues_file=$ISSUES_FILE" >> $GITHUB_OUTPUT
        else
          echo "found=false" >> $GITHUB_OUTPUT
          echo "Issues documentation not found for PR #$PR_NUMBER"
        fi
        
    - name: Create issues from documentation
      if: steps.find-docs.outputs.found == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO_NAME: ${{ github.repository }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        ISSUES_FILE: ${{ steps.find-docs.outputs.issues_file }}
      run: |
        # Check if the create_issues.py script exists
        if [ -f "AGENTIC/devDOCS/create_issues.py" ]; then
          python AGENTIC/devDOCS/create_issues.py \
            --token $GITHUB_TOKEN \
            --repo $REPO_NAME \
            --pr $PR_NUMBER \
            --issues-file $ISSUES_FILE || echo "Issue creation failed, continuing..."
        else
          echo "create_issues.py not found, skipping issue creation"
        fi
          
    - name: Commit updated documentation
      if: steps.find-docs.outputs.found == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ${{ steps.find-docs.outputs.issues_file }}
        git commit -m "docs: update ISSUES_TO_CREATE${{ github.event.pull_request.number }} with created issue links"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Comment on PR with created issues
      if: steps.find-docs.outputs.found == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const prNumber = ${{ github.event.pull_request.number }};
          const issuesFile = '${{ steps.find-docs.outputs.issues_file }}';
          
          try {
            // Read the updated issues file to get created issue links
            const content = fs.readFileSync(issuesFile, 'utf8');
            
            // Extract issue links from the "Created Issues" section
            const createdIssuesSection = content.split('## Created Issues')[1];
            if (createdIssuesSection) {
              const comment = "## Automatically Created Issues\n\n" +
                             "The following issues were automatically created from the ISSUES_TO_CREATE documentation:\n\n" +
                             createdIssuesSection;
                             
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log("Failed to comment on PR with created issues:", error.message);
          }