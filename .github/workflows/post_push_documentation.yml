name: Post-Push Documentation Generation

on:
  push:
    branches: [main, dev, feature/**, bugfix/**]

permissions:
  contents: read
  issues: write

jobs:
  generate-documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch all history for proper diff analysis
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Get changed files
      id: changed-files
      run: |
        # Get the list of files changed in this push
        if [ "$GITHUB_EVENT_NAME" = "push" ]; then
          # For push events, compare with the previous commit
          # Handle the case where github.event.before might be all zeros (first commit)
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            # For the first commit, get all files in the current commit
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          fi
        else
          # For pull request events, use the GitHub API
          CHANGED_FILES=$(jq -r '.pull_request.changed_files[] | .filename' $GITHUB_EVENT_PATH 2>/dev/null || echo "")
        fi
        
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Save to a file for later use
        echo "$CHANGED_FILES" > changed_files.txt
        
    - name: Generate documentation
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH_NAME: ${{ github.ref_name }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        # Determine the documentation directory name
        if [ -n "$PR_NUMBER" ]; then
          DOC_DIR="devDOCS/$PR_NUMBER"
        else
          DOC_DIR="devDOCS/$BRANCH_NAME"
        fi
        
        # Create the documentation directory
        mkdir -p $DOC_DIR
        
        # Check if the generate_docs.py script exists
        if [ -f "AGENTIC/devDOCS/generate_docs.py" ]; then
          # Run the documentation generation script (placeholder)
          python AGENTIC/devDOCS/generate_docs.py \
            --changed-files changed_files.txt \
            --output-dir $DOC_DIR \
            --branch $BRANCH_NAME \
            --pr-number $PR_NUMBER || echo "Documentation generation failed, continuing..."
        else
          echo "generate_docs.py not found, skipping documentation generation"
        fi
          
    - name: Validate documentation
      run: |
        # Check that the required documentation files were created
        if [ -n "$PR_NUMBER" ]; then
          DOC_DIR="devDOCS/$PR_NUMBER"
          if [ -d "$DOC_DIR" ]; then
            REQUIRED_FILES=(
              "LESSONS_LEARNED${PR_NUMBER}.md"
              "FUTURE_WORK_TODO${PR_NUMBER}.md"
              "ISSUES_TO_CREATE${PR_NUMBER}.md"
            )
            
            MISSING_FILES=()
            for file in "${REQUIRED_FILES[@]}"; do
              if [ ! -f "$DOC_DIR/$file" ]; then
                MISSING_FILES+=($file)
              fi
            done
            
            if [ ${#MISSING_FILES[@]} -ne 0 ]; then
              echo "Warning: Missing required documentation files: ${MISSING_FILES[*]}"
              # Don't fail the workflow for missing files
            fi
          fi
        fi
        
    - name: Commit and push documentation
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add the generated documentation
        git add devDOCS/ || echo "No documentation to add"
        
        # Check if there are changes to commit
        if ! git diff --staged --quiet; then
          git commit -m "docs: auto-generate development documentation for ${{ github.ref_name }}"
          git push
        else
          echo "No changes to documentation, skipping commit"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Comment on PR with documentation links
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prNumber = ${{ github.event.pull_request.number }};
          const branchName = '${{ github.ref_name }}';
          
          // Create comment with links to generated documentation
          const comment = "## Development Documentation\n\n" +
                         "The following development documentation has been automatically generated:\n\n" +
                         "- [Lessons Learned](https://github.com/" + context.repo.owner + "/" + context.repo.repo + "/tree/main/devDOCS/" + branchName + "/LESSONS_LEARNED" + prNumber + ".md)\n" +
                         "- [Future Work](https://github.com/" + context.repo.owner + "/" + context.repo.repo + "/tree/main/devDOCS/" + branchName + "/FUTURE_WORK_TODO" + prNumber + ".md)\n" +
                         "- [Issues to Create](https://github.com/" + context.repo.owner + "/" + context.repo.repo + "/tree/main/devDOCS/" + branchName + "/ISSUES_TO_CREATE" + prNumber + ".md)\n\n" +
                         "Please review and update as needed.";
                         
          try {
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log("Failed to comment on PR:", error.message);
          }