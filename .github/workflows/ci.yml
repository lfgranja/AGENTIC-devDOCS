name: Continuous Integration

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache Python dependencies
      uses: actions/cache@2f8e54208210a422b2efd51efaa6bd6d7ca8920f
      with:
        path: |
          ~/.cache/pip
          ${{ env.pythonLocation }}/lib/python*/site-packages
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then pip install -r "requirements.txt"; fi
        pip install pytest pytest-mock
    
    - name: Check if tests directory exists
      id: check_tests
      run: |
        if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
          echo "tests_exist=true" >> $GITHUB_OUTPUT
        else
          echo "tests_exist=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Run tests
      if: steps.check_tests.outputs.tests_exist == 'true'
      run: |
        python -m pytest tests/ -v
    
    - name: Run linters
      run: |
        # Check for syntax errors
        find . -name "*.py" -exec python -m py_compile {} +
    
    - name: Run security checks
      run: |
        # Check for security issues in dependencies
        pip install bandit
        bandit -r AGENTIC/devDOCS/ -x AGENTIC/devDOCS/__pycache__/ || true

  documentation:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
    
    - name: Set up Python
      uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
      with:
        python-version: '3.10'
    
    - name: Cache Python dependencies
      uses: actions/cache@2f8e54208210a422b2efd51efaa6bd6d7ca8920f
      with:
        path: |
          ~/.cache/pip
          ${{ env.pythonLocation }}/lib/python*/site-packages
        key: ${{ runner.os }}-python-3.10-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-3.10-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then pip install -r "requirements.txt"; fi
    
    - name: Generate documentation
      run: |
        # Generate documentation for the project
        python AGENTIC/devDOCS/generate_docs.py --help || true
        python AGENTIC/devDOCS/create_issues.py --help || true
    
    - name: Validate documentation
      run: |
        # Check that documentation files are properly formatted
        echo "Validating markdown files..."